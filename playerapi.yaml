asyncapi: 2.0.0
info:
  title: Verona Interfaces Specification "Player"
  version: '5.2.0'
  description: |
    This is one part of the [Verona Online Assessment Standards](https://verona-interfaces.github.io). All messages are sent via the postMessage function of the html page. The player takes the page root of its parent as target (parent.window), and the application binds the function call to the iframe element of the player.

    Most important, the message body carries as first parameter the operationId of the message.

    The html page MUST contain a script-tag with metadata. The syntax and structure of this data are described [here](https://verona-interfaces.github.io/intro/metadata.html).

  license:
    name: CC0-1.0
    url: http://creativecommons.org/publicdomain/zero/1.0/
  contact:
    name: Institute for Educational Quality Improvement (IQB)
    url: https://www.iqb.hu-berlin.de
    email: iqb-tbadev@hu-berlin.de

channels:
  vopReadyNotification:
    subscribe:
      operationId: vopReadyNotification
      summary: Ready Notification
      description: The player announces that it's code is loaded and initialized so the communication can start.
      message:
        name: vopReadyNotification
        payload:
          type: object
          properties:
            metadata:
              type: string
              description: Via this property, the player sends the stringified metadata object defined as json-ld
                in the header of the html file. See [here](https://github.com/verona-interfaces/metadata/#readme) for
                more information.
          required:
            - metadata

  vopStartCommand:
    publish:
      operationId: vopStartCommand
      summary: Start Command
      description: The application sends parameters for running the unit and commands the start of user interaction.
      message:
        name: vopStartCommand
        payload:
          type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionIdString"
            unitDefinition:
              type: string
              format: byte
              description: The definition of the unit (if given) lets the player adapt. An audio player gets it's audio
                sequence, a choice player gets it's options...
              example: 'iqb-scripted::1.4.0
                        title::Testscript Title2??Hilfetext2
                        multiple-choice::mc_var1::1::Multiple Choice Feld: ::Choice1##Choice2##Choice3??Hilfetext1
                        drop-down::dd_var1::1::Dropdown Feld: ::Choice1##Choice2##Choice3??Hilfetext1
                        checkbox::check_var1::0::Ja klick mal!
                        if-start::dd_var1::1
                          input-text::jajaj::sap osjxapsoxa
                        if-else
                          input-text::jajaj22::sap osjxapsoxa UUUU
                          text::NOT Choice1
                        if-end'
            unitDefinitionType:
              type: string
              description: This lets the player the unit definition format know. This might avoid UI mess after
                getting old definitions.
              example: 'iqb-scripted@1.4.0'
            unitState:
              $ref: "#/components/schemas/UnitState"
              description: If there is any state what should be restored, then this is the information for that.
            playerConfig:
              $ref: "#/components/schemas/PlayerConfig"
              description: This data supplies some information or instruction about this specific run of the unit
                (number, unit title, some behavioral data for the player).
          required:
            - sessionId

  vopStateChangedNotification:
    subscribe:
      operationId: vopStateChangedNotification
      summary: State Changed Notification
      description: The state of the unit and/or of the player has changed. Some logs entries might be sent.
      message:
        name: vopStateChangedNotification
        payload:
          type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionIdString"
            timeStamp:
              type: string
              format: date-time
              description: Ensures, that later arriving states are ignored.
              example: "2021-11-15T10:22:25Z"
            unitState:
              $ref: "#/components/schemas/UnitState"
              description: To be stored, evaluated etc. This is the main yield, the responses.
            playerState:
              $ref: "#/components/schemas/PlayerState"
              description: Information important only for the application to ensure the correct visual, such as
                navigation buttons.
            log:
              type: array
              items:
                $ref: "#/components/schemas/LogEntry"
              description: Log entries (lean version) add some information to the response in order to understand
                the response process better or (rich version) let the analyst replay every change of the state.
          required:
            - sessionId
            - timeStamp

  vopPageNavigationCommand:
    publish:
      operationId: vopPageNavigationCommand
      summary: Page Navigation Command
      description: The application wants the player to navigate to a specific page.
      message:
        name: vopPageNavigationCommand
        payload:
          type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionIdString"
            target:
              type: string
              description: Id of the page matching one of the validPages given to the application by the playerState
                data of the StateChangedNotification.
              example: 'page4'
          required:
            - sessionId
            - target
  vopUnitNavigationRequestedNotification:
    subscribe:
      operationId: vopUnitNavigationRequestedNotification
      summary: Unit Navigation Requested Notification
      description: The user has triggered a navigation request.
      message:
        name: vopUnitNavigationRequestedNotification
        payload:
          type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionIdString"
            target:
              $ref: "#/components/schemas/NavigationTarget"
          required:
            - sessionId
            - target

  vopNavigationDeniedNotification:
    publish:
      operationId: vopNavigationDeniedNotification
      summary: Navigation Denied Notification
      description: The host lets the player know that a navigation request was denied due to player state.
      message:
        name: vopNavigationDeniedNotification
        payload:
          type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionIdString"
            reason:
              type: array
              description: This optional parameter explains the reason for the failed attempt to navigate. The player
                can visualise the problem to the testee. For example, all required but empty input elements get
                a red border or the message 'please scroll down' is presented.
              items:
                type: string
                enum:
                  - presentationIncomplete
                  - responsesIncomplete
          required:
            - sessionId

  vopWindowFocusChangedNotification:
    subscribe:
      operationId: vopWindowFocusChangedNotification
      summary: Window Focus Changed Notification
      description: In some use cases like exam mode the host must know whether the host or the player has the
        window's focus. If none of these windows have the focus (i. e. the testee has left the test), some logging or
        warning could be necessary. The player should listen to the window events 'blur' and 'focus'.
      message:
        name: vopWindowFocusChangedNotification
        payload:
          type: object
          properties:
            timeStamp:
              type: string
              format: date-time
              description: Ensures, that later arriving states are ignored.
              example: "2021-11-15T10:22:25Z"
            hasFocus:
              type: boolean
              description: true if the player got the focus, false if it lost the focus.
          required:
            - timeStamp
            - hasFocus

components:
  schemas:
    LogEntry:
      description: The player can send any information about events happening during the interaction phase.
      type: object
      properties:
        timeStamp:
          type: string
          format: date-time
          example: "2021-11-15T10:22:25Z"
        key:
          type: string
          description: This key might help to classify the events afterwards.
          example: 'UNIT_NAVIGATION_FAILED'
        content:
          type: string
          format: byte
          description: Some information to specify the event.
          example: '{"unitId": "M24093EX", "reason": "responsesIncomplete"}'
      required:
        - timeStamp
        - key
    PlayerState:
      type: object
      properties:
        validPages:
          description: This data is structured as "page key" => "page label", so we have (1) keys for navigation
            commands or state notifications and (2) strings as labels of navigation buttons if needed.
          type: object
          additionalProperties:
            type: string
          example:
            page1: 'Seite 1'
            page2: 'Seite 2'
        currentPage:
          description: Key of the page currently presented. This key is taken from the list of valid pages. If the
            paging mode is 'concat-scroll', the first page with parts in view port is taken as current page.
          type: string
          example: 'page4'
    UnitState:
      type: object
      properties:
        dataParts:
          description: This data is used by the player to restore the former response state and by data processing
            systems to analyse the responses. The host must buffer all data parts, because the player might send only
            changed data parts, not always the whole package. The host stores all parts but only the last given
            version (respect timeStamp!). Every data part is identified by a unique key, the data is stored as
            serialized object (string).
          type: object
          additionalProperties:
            type: string
            format: byte
          example:
            page1: '{"a": 1, "b": 233}'
            page2: '{"c": "sehr gut!", "d": true}'
        presentationProgress:
          description: This reports the progress of presentation of unit content. The host can enable or disable the
            navigation to the next unit depending on that value. For example, all audio elements are required to be
            played or all pages must be presented to the page bottom. This way, giving no response to an item is
            always intended.
          type: string
          enum:
            - none
            - some
            - complete
          example: 'none'
        responseProgress:
          description: This reports the progress of responding. The host can enable or disable the navigation to the
            next unit depending on that value. The value 'complete' announces not only that all required responses are
            given but that these responses are valid too. The value 'complete' can be sent even not all responses are
            given - the host is interested only in REQUIRED responses. So make sure to mark all response elements
            correctly corresponding to this behaviour.
          type: string
          enum:
            - none
            - some
            - complete
          example: 'some'
        unitStateDataType:
          type: string
          description: This string specifies the format of the data stored in dataParts (value). Every
            transformation or analysis of stored unit data requires knowledge about the format. When the host sends
            data to the player to restore the former unit state, the player should check the given data type to
            avoid data mess after getting an old data type.
          example: 'iqb-standard@2.1.2'
    NavigationTarget:
      description: This enumeration lists all possible targets the player could send a navigation request for, relative
        to the position of the current unit. This could be the next and previous unit, last and first unit of the current
        range of units (booklet, testlet) or the end of the test. The ending is seen as kind of termination of test,
        e. g. the announcement of the testee, that all responses are given. What exactly the host will navigate to
        depends of the nature of the test or the use case and might depend on configuration parameters of the specific
        booklet as well.
      type: string
      enum:
        - next
        - previous
        - first
        - last
        - end
      example: 'next'

    SessionIdString:
      description: The session id flags all communication. If a message has no or empty
        session id, it's not processed. The session id is unique and was generated by the application. Any
        simple algorithm would work. The session id helps to link the correct unit with the
        data of the message. Using the id of the player hosting html element is less reliable, because the
        element could be reused with another unit.
      type: string
      example: 'idk8ur5jf9ru5jk'

    PlayerConfig:
      type: object
      properties:
        unitNumber:
          description: The player might show the numbering of the current unit to ease the navigation.
          type: integer
          minimum: 1
          example: '14'
        unitTitle:
          description: The player might show the title of the current unit. Unless the unit definition could consist of
            a title, the host might decide to change the title. For example, this is necessary if one unit appears more
            then once in a booklet.
          type: string
          maxLength: 50
          example: 'Ein wunderbarer Ausflug'
        unitId:
          description: The player might include the internal unit id in state variables or logs.
          type: string
          maxLength: 20
          example: 'M24093EX'
        logPolicy:
          description: The host expects the player to send no logs, only important logs, all possible logs or even logs
            for debugging purposes. This is a guideline. The player can decide what exactly the logging consists of.
          type: string
          enum:
            - disabled
            - lean
            - rich
            - debug
          example: 'lean'
        pagingMode:
          description: If the player makes it optional, then the page presentation can be changed by the host. The pages are
            presented separately, with page navigation buttons, concatenated to one big page or concatenated in snap mode (scrolling vertically, but
            only one page is visible at a time).
          type: string
          enum:
            - separate
            - buttons
            - concat-scroll
            - concat-scroll-snap
          example: 'concat-scroll'
        printMode:
          description: If this mode is 'on', the host presents the unit as preview for printing. Depending on the unit,
            the player modifies the presentation by (1) assignment of print styles, (2) ALL unit parts are displayed regardless
            of conditions, (3) all pages are displayed among each other, (4) the height of the given space is ignored
            (no vertical scrollbars by player). If the mode is set to 'on-with-ids', the player adds control labels to
            show the IDs.
          type: string
          enum:
            - off
            - on
            - on-with-ids
          example: 'off'
        enabledNavigationTargets:
          description: This lets the player know, what navigation target is enabled to natigate to. The player might
            then alter the presentation of responding buttons.
          type: array
          items:
            $ref: "#/components/schemas/NavigationTarget"
        startPage:
          description: This requests the player to navigate to a certain page after loading. The host might know this
            page id from former usages of the unit.
          type: string
          example: 'page5'
        directDownloadUrl:
          description: After starting the player and loading the unit definition and former responses, it might be
            necessary to load additional code or data from the server. This data is identified by an resource ID
            (usually a file name). The player can download this resource by itself without further interaction with
            the host frontend. The property directDownloadUrl provides the url for download. The player extends this
            url by an url separator "/" and the resource ID (uri-encoded if needed).
          type: string
          example: 'https://www.iqb-testcenter.de/download/iskeid-34e845-didmmemdkek'
